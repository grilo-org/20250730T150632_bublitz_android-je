name: "SonarCloud Analysis"
on:
  push:
    branches: [ "master" ]
  workflow_dispatch: {}

jobs:
  sonar-scan:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detectar a Raiz do Projeto
        id: find-root
        shell: bash
        run: |
          PROJECT_DIR="."
          ALL_PROJECTS=$(find . -maxdepth 3 -name "settings.gradle" -o -name "settings.gradle.kts")
          if [ -n "$ALL_PROJECTS" ]; then
            PROJECT_DIR=$(dirname "$(echo "$ALL_PROJECTS" | head -n1)")
          fi
          echo "Projeto principal selecionado: $PROJECT_DIR"
          echo "PROJECT_PATH=$PROJECT_DIR" >> $GITHUB_ENV

      # Passo para determinar a versão do Java (lógica mantida)
      - name: Determine Java Version
        id: determine_java
        working-directory: ${{ env.PROJECT_PATH }}
        shell: bash
        run: |
          JAVA_VERSION='17'
          PROPERTIES_FILE="gradle/wrapper/gradle-wrapper.properties"
          if [ -f "$PROPERTIES_FILE" ]; then
            # =============================================================================
            # CORREÇÃO: Adicionado '|| true' para o grep não falhar o script
            # =============================================================================
            GRADLE_VERSION=$(grep -oP 'gradle-\K[0-9.]*(?=-)' "$PROPERTIES_FILE" || true)
            if [[ "$GRADLE_VERSION" == 4.* ]] || [[ "$GRADLE_VERSION" == 3.* ]] || [[ "$GRADLE_VERSION" == 2.* ]]; then
              JAVA_VERSION='8'
            fi
          fi
          echo "JAVA_VERSION=$JAVA_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ steps.determine_java.outputs.JAVA_VERSION }}
          distribution: 'temurin'

      # Lógica de build com Heredoc mantida, pois está correta
      - name: Build and Analyze with Gradle
        working-directory: ${{ env.PROJECT_PATH }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: "grilo-org_20250730T150632_bublitz_android-je"
          SONAR_ORGANIZATION: "grilo-org"
        shell: bash
        run: |
          set -e
          echo "Criando script de inicialização do Gradle de forma segura..."
          cat <<'EOF' > /tmp/init.gradle
          allprojects {
              apply plugin: "org.sonarqube"
              sonarqube {
                  properties {
                      property "sonar.projectKey", System.getenv("SONAR_PROJECT_KEY")
                      property "sonar.organization", System.getenv("SONAR_ORGANIZATION")
                      property "sonar.host.url", "https://sonarcloud.io"
                      property "sonar.sources", "."
                      property "sonar.login", System.getenv("SONAR_TOKEN")
                  }
              }
          }
          EOF
          
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            echo "Iniciando build e análise com o wrapper do Gradle..."
            ./gradlew build sonarqube --init-script /tmp/init.gradle -x test
          else
            echo "ERRO: O arquivo ./gradlew não foi encontrado no projeto."
            exit 1
          fi
          echo "Build e análise concluídos com sucesso."

